<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cqut.why.authoringsystem.authoringsystem.dao.UserMapper">
    <insert id="insert" parameterType="com.cqut.why.authoringsystem.authoringsystem.entity.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user(name,username,password,tag)
         values(#{name,jdbcType=VARCHAR},#{username,jdbcType=VARCHAR},#{password,jdbcType=VARCHAR},#{tag,jdbcType=VARCHAR})
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.cqut.why.authoringsystem.authoringsystem.entity.User">
        update user
        set name = #{name,jdbcType=VARCHAR},
            username = #{username,jdbcType=VARCHAR},
            tag = #{tag,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="changeStatus">
         update user set status = #{status}
              where id = #{id}
    </update>
    <delete id="deleteUser">
        delete from user
         where id = #{id}
    </delete>


    <select id="findByUsername" parameterType="java.lang.String"
            resultType="com.cqut.why.authoringsystem.authoringsystem.entity.User">
        select * from user where username = #{account}
    </select>


    <select id="findPermissionByUsername" parameterType="java.lang.String"
            resultType="com.cqut.why.authoringsystem.authoringsystem.entity.dto.PermissionEntity">
   select u.id, r.tag from user u
    inner join role r on u.id = r.user_id
    where username = #{username}
    </select>


    <select id="getUserByUsername" parameterType="java.lang.String"
            resultType="com.cqut.why.authoringsystem.authoringsystem.entity.User">
        select * from user where username = #{username}
    </select>


    <select id="changePassword" parameterType="com.cqut.why.authoringsystem.authoringsystem.entity.dto.ChangePasswordDTO">
        update user set password = #{newPassword} where id = #{id}
    </select>

    <select id="loadByUserName" parameterType="string"
            resultType="com.cqut.why.authoringsystem.authoringsystem.entity.User">
    select user.id,name, username, password, contact_tel,tag, status
    from user
      where  username = #{username}
  </select>

    <select id="getRole" parameterType="java.lang.Integer"
            resultType="com.cqut.why.authoringsystem.authoringsystem.entity.Role">
      select tag from role where user_id = #{id}
    </select>

    <select id="selectCount" resultType="java.lang.Integer">
        select COUNT(*) from `user`
        left join role re on `user`.id = re.user_id
        <where>
            <if test="username != '' and username != null" >
                and username like concat('%',#{username},'%')
            </if>
            <if test="name != '' and name != null" >
                and user.name like concat('%',#{name},'%')
            </if>
            <if test="tag != '' and tag != null ">
                and user.tag like concat('%',#{tag},'%')
            </if>
            <if test="status != '' and status != null">
                and status = #{status}
            </if>
        </where>
    </select>

    <select id="selectPage" parameterType="com.cqut.why.authoringsystem.authoringsystem.entity.params.SysUserQueryParams" resultType="com.cqut.why.authoringsystem.authoringsystem.entity.User">
        select u.id,u.name, username, password, contact_tel, status, u.created_at,u.tag
        from user u
        left join role re on u.id = re.user_id
        <where>
            <if test="username != '' and username != null" >
                and username like concat('%',#{username},'%')
            </if>
            <if test="name != '' and name != null" >
                and u.name like concat('%',#{name},'%')
            </if>
            <if test="tag != '' and tag != null ">
                and u.tag like concat('%',#{tag},'%')
            </if>
            <if test="status != '' and status != null">
                and status = #{status}
            </if>
        </where>
        limit ${(page- 1)* pageSize}, #{pageSize}
    </select>

    <select id="getUserById" resultType="com.cqut.why.authoringsystem.authoringsystem.entity.User">
        select id,username,name,tag
        from user
           where id = #{id,jdbcType=INTEGER}
    </select>
</mapper>
